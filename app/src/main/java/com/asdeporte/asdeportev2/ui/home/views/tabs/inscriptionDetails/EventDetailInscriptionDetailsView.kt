package com.asdeporte.asdeportev2.ui.home.views.tabs.inscriptionDetailsimport android.content.Contextimport android.util.AttributeSetimport android.view.LayoutInflaterimport android.view.Viewimport android.widget.FrameLayoutimport androidx.core.view.isVisibleimport androidx.recyclerview.widget.LinearLayoutManagerimport com.asdeporte.asdeportev2.Rimport com.asdeporte.asdeportev2.databinding.EventDetailViewInscriptionDetailsBindingimport com.asdeporte.asdeportev2.ui.home.adapters.tabs.inscriptionDetails.InscriptionDetailAdapterimport com.asdeporte.asdeportev2.ui.home.models.tabs.plusMembership.PlusMembershipModelclass EventDetailInscriptionDetailsView @JvmOverloads constructor(    context: Context,    attrs: AttributeSet? = null,    defStyle: Int = 0) : FrameLayout(context, attrs, defStyle) {    private var binding: EventDetailViewInscriptionDetailsBinding    init {        binding = EventDetailViewInscriptionDetailsBinding.inflate(            LayoutInflater.from(context),            this,            true        )        initListener()    }    fun setData(plusMemberships: List<PlusMembershipModel>) {        binding.benefitPlus.setData(plusMemberships)        val adapter = InscriptionDetailAdapter(plusMemberships)        binding.rvInscriptionDependent.adapter = adapter        binding.rvInscriptionDependent.setHasFixedSize(true)        binding.rvInscriptionDependent.layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)        binding.rvInscriptionDependent.isNestedScrollingEnabled = true    }    private fun initListener() {        binding.clInscription.setOnClickListener {            if (binding.llContentInscription.isVisible) {                resetLayout()                binding.ivIconInscription.setImageDrawable(binding.root.context.getDrawable(R.drawable.ic_add))                binding.llContentInscription.visibility = View.GONE            } else {                resetLayout()                binding.ivIconInscription.setImageDrawable(binding.root.context.getDrawable(R.drawable.ic_minus))                binding.llContentInscription.visibility = View.VISIBLE            }        }        binding.clInscriptionDependent.setOnClickListener {            if (binding.llContentInscriptionDependent.isVisible) {                resetLayout()                binding.ivIconInscriptionDependent.setImageDrawable(                    binding.root.context.getDrawable(R.drawable.ic_add)                )                binding.llContentInscriptionDependent.visibility = View.GONE            } else {                resetLayout()                binding.ivIconInscriptionDependent.setImageDrawable(                    binding.root.context.getDrawable(R.drawable.ic_minus)                )                binding.llContentInscriptionDependent.visibility = View.VISIBLE            }        }    }    private fun resetLayout() {        binding.llContentInscription.visibility = View.GONE        binding.ivIconInscription.setImageDrawable(binding.root.context.getDrawable(R.drawable.ic_add))        binding.llContentInscriptionDependent.visibility = View.GONE        binding.ivIconInscriptionDependent.setImageDrawable(binding.root.context.getDrawable(R.drawable.ic_add))    }}