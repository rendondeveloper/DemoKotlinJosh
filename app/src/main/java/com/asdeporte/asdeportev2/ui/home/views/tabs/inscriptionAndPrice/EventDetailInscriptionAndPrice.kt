package com.asdeporte.asdeportev2.ui.home.views.tabs.inscriptionAndPriceimport android.content.Contextimport android.util.AttributeSetimport android.view.LayoutInflaterimport android.widget.FrameLayoutimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.asdeporte.asdeportev2.databinding.EventDetailViewInscriptionAndPriceBindingimport com.asdeporte.asdeportev2.ui.home.adapters.tabs.distanceAndCategory.MainNotesAdapterimport com.asdeporte.asdeportev2.ui.home.adapters.tabs.distanceAndCategory.NotesAdapterimport com.asdeporte.asdeportev2.ui.home.adapters.tabs.inscriptionAndPrice.EventServicesAdapterimport com.asdeporte.asdeportev2.ui.home.adapters.tabs.inscriptionAndPrice.InscriptionWayAdapterimport com.asdeporte.asdeportev2.ui.home.adapters.tabs.inscriptionAndPrice.KitAdapterimport com.asdeporte.asdeportev2.ui.home.adapters.tabs.inscriptionAndPrice.PayAdapterimport com.asdeporte.asdeportev2.ui.home.adapters.tabs.inscriptionAndPrice.PriceInscriptionAdapterimport com.asdeporte.asdeportev2.ui.home.models.tabs.inscriptionAndPrice.InscriptionAndPriceModelclass EventDetailInscriptionAndPrice @JvmOverloads constructor(        context: Context,        attrs: AttributeSet? = null,        defStyle: Int = 0) : FrameLayout(context, attrs, defStyle) {    private var binding: EventDetailViewInscriptionAndPriceBinding    init {        binding = EventDetailViewInscriptionAndPriceBinding.inflate(LayoutInflater.from(context), this, true)    }    fun setData(inscriptionAndPriceModel: InscriptionAndPriceModel) {        setKitAdapter(KitAdapter(inscriptionAndPriceModel.kit))        setEventServicesAdapter(inscriptionAndPriceModel.eventServices.footer, EventServicesAdapter(inscriptionAndPriceModel.eventServices.list))        setPriceInscriptionAdapter(PriceInscriptionAdapter(inscriptionAndPriceModel.inscriptionPrice))        setPriceInscriptionAdapter(inscriptionAndPriceModel.inscriptionWay.footer,                InscriptionWayAdapter(inscriptionAndPriceModel.inscriptionWay.list))        setPriceInscriptionAdapterViewSendHome(InscriptionWayAdapter(inscriptionAndPriceModel.sendHome))        setPayAdapter(PayAdapter(inscriptionAndPriceModel.payOne.list))        setPayAdapterTwo(inscriptionAndPriceModel.payTwo.footer,                PayAdapter(inscriptionAndPriceModel.payTwo.list))        setMainNotesAdapter(MainNotesAdapter(listOf(inscriptionAndPriceModel.notes)))    }    private fun setKitAdapter(adapter: KitAdapter) {        binding.viewKit.setData(adapterCustom = adapter, orientation = RecyclerView.VERTICAL)    }    private fun setEventServicesAdapter(footer: Int, adapter: EventServicesAdapter) {        binding.viewEventServices.setData(adapterCustom = adapter, orientation = RecyclerView.VERTICAL)        binding.viewEventServices.setFooter(footer)    }    private fun setPriceInscriptionAdapter(adapter: PriceInscriptionAdapter) {        binding.viewPriceInscription.setData(adapterCustom = adapter, orientation = RecyclerView.VERTICAL)    }    private fun setPriceInscriptionAdapter(footer: Int, adapter: InscriptionWayAdapter) {        binding.viewInscriptionWays.setData(adapterCustom = adapter, orientation = RecyclerView.VERTICAL)        binding.viewInscriptionWays.setFooter(footer)    }    private fun setPriceInscriptionAdapterViewSendHome(adapter: InscriptionWayAdapter) {        binding.viewSendHome.setData(adapterCustom = adapter, orientation = RecyclerView.VERTICAL)    }    private fun setPayAdapter(adapter: PayAdapter) {        binding.viewPayWay.setData(adapterCustom = adapter, orientation = RecyclerView.HORIZONTAL)    }    private fun setPayAdapterTwo(footer: String, adapter: PayAdapter) {        binding.viewPayWayTwo.setData(adapterCustom = adapter, orientation = RecyclerView.HORIZONTAL)        binding.viewPayWayTwo.setFooter(footer)    }    private fun setMainNotesAdapter(adapter: MainNotesAdapter) {        binding.rvNotes.apply {            this.adapter = adapter            setHasFixedSize(true)            layoutManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)            isNestedScrollingEnabled = true        }    }}